import React from 'react';
import { SortDirection } from "../data/rr-mixed-data";
import { RapidProps } from "../interface/rr-mixed-interface";
import RapidComponentState from "./rr-component-state";
import RapidReactComponent from "./rr-react-component";
import { FieldSpecification } from "../data/rr-input-definition";
import { RapidComponentHelper } from "./helper/rr-component-helper";
import { RapidHttpRequestHelper } from "./helper/rr-http-request-helper";
export default class RapidComponent<P extends RapidProps, S extends RapidComponentState> extends RapidReactComponent<P, S> {
    private readonly REDIRECT_DATA;
    state: RapidComponentState;
    fieldSpecification: FieldSpecification;
    private rapidComponentHelper;
    httpRequest: RapidHttpRequestHelper;
    pageTitle: string;
    static contextType: React.Context<import("../config/rr-app-context").RapidAppContextProps | null>;
    context: any;
    constructor(props: any);
    setPageTitle(pageTitle?: string): void;
    resetForm(): void;
    removeFieldSpecification(...fields: any): void;
    private appConfig;
    getRandomKey(): string;
    notifyComponentChange(): void;
    private allowControlFromChild;
    getComponentHelper(): RapidComponentHelper;
    renderUI(): import("react/jsx-runtime").JSX.Element;
    fieldDefinition(field: FieldSpecification): void;
    showServerSideFormValidationError(errors: Object): void;
    setInputDefaultValue(name: string, value: any): void;
    updateInputValue(name: string, value: any): void;
    setupFieldAttrs(name: string): any;
    getFormDataValueByName(name: string, defaultValue?: any): any;
    getFormData(message?: string): {
        [key: string]: any;
    };
    setFormData(formData: {
        [key: string]: any;
    }): void;
    resetFormData(): void;
    removeDataFromFormData(name: string): void;
    setValueToFromData(name: string, value: any): void;
    getBaseUrl(): string;
    showErrorFlash(message: string): void;
    showSuccessFlash(message: string): void;
    closeFlashMessage(): void;
    showLoader(): void;
    hideLoader(): void;
    redirect(url: any): void;
    showLoginUI(): void;
    redirectWithData(url: any, data: any): void;
    getRedirectData(): any;
    successRedirect(url: any, message: string): void;
    failedRedirect(url: any, message: string, resumeUrl?: any): void;
    showRedirectMessage(): void;
    tableColumnSortAction(event: any, sortDirection: SortDirection, fieldName?: string, callBack?: any): void;
    beforeRenderCall(): void;
    render(): import("react/jsx-runtime").JSX.Element;
}
